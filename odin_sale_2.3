#include <iostream>
#include <string>
#include <stdlib.h>
#include <iomanip>
#include <ctime>
#include <vector>
#include <fstream>
#include <memory>
using namespace std;

const int ROW = 3,  COL = 3;
void displayMenu();
void displayFoodMenu();
void displayDrinkMenu();
void displayGiftCard();
void displayMenueOrder(const string[][COL], const double[][COL], int);
void ClearScreen();
int inputValidate(int);
int inputQuantityValidate(int);
void displayReceipt(string *);
void createRecipt(const string[][COL], const double[][COL], unique_ptr<int [][COL]> &);
void timeStamp();
void saveDataInFile(string *);
bool SearchItem(string, vector<string>, vector<double>);
int* FindingItemPostition(string);
double* FindingPricePosition(string);
void displayAllItem(vector<string>, vector<double>);
void identifyUser(string *);

////////////////////////////////////////////
///////////////ARRAY FOR ITEM///////////////
//////////////ARRAY FOR PRICE///////////////
/////////////For          MENU//////////////
///////////////////////////////////////////
////////Use 2-D smart point to truck number of user oder
////////numberOfOrder[1][] is for Food
///////numberOfOrder[2][] is Drink
///////numberOfOrder[3][] is gift card
///////Base on 3 x 3
string itemName[ROW][COL]={{ "Bacon Sandwich","Bistro Box","Turkey Burger" },
                            { "Americano Caffe", "Carmel Macchiato", "Espresso" },
                            { "5 dollar gift card", "10 dollar gift card","15 dollar gift card" }
                            };
 double itemPrice[ROW][COL]={{ 4.5, 5.5, 4.5 },
                            { 3.5, 4.5, 5.0 },
                            { 5.0, 10.0, 15.0 }
                            } ;

unique_ptr<int [][COL]> numberOfOrder(new int[ROW][COL]());
double commulateTotal = 0;
static int itemCounter = 0;
////////////////////////////////////
////////  TAX = 8.5%  ////////////
//////////////////////////////////
const double TAX = 0.085;

  ////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////
  ///////////Program Start here//////////////////////////////
  ////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////
int main()
{

  //                                                            End
  //////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////
  //Create user's name
  string user;
  string *ptr_user = &user;
  identifyUser(ptr_user);
  //                              End
  ////////////////////////////////////////////

  ////////////////////////////////////////////////
	//variable that User enter
	int UserInput;


	int numberWanted;
	/////////////////////////////////////////////////
	////////////Menu start Here//////////////////
	////////////////////////////////////////////////

	do
	{
		//////////////////Main menu//////////////////
		displayMenu();
		cin >> UserInput;
		//input validation
		if(UserInput <1 || UserInput >5)
        {
            cin.clear();
            cin.ignore(INT8_MAX, '\n');
            cout << "Sorry, not that option. Please enter 1~6: ";
            cin >> UserInput;
            
        }


		/////////////////////////////////////////
		//////////Go into Menu 1, 2, or 3///////

		{
			switch (UserInput)
			{
				/////////////////////Process In the food menu///////////////
			case 1:
				do
				{
					displayFoodMenu();
					cin >> UserInput;
					UserInput = inputValidate(UserInput);
					switch (UserInput)
					{
					case 1:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[0][0] += numberWanted;
						commulateTotal += numberWanted * itemPrice[0][0];
						break;
					case 2:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[0][1] += numberWanted;
						commulateTotal += numberWanted * itemPrice[0][1];
						break;
					case 3:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[0][2] += numberWanted;
						commulateTotal += numberWanted * itemPrice[0][2];
						break;
					case 4:
						break;
					case 5:
						displayReceipt(ptr_user);
						return 0;
					}
				} while (UserInput < 4);

				break;
				/////////////////////Process In the Drink menu///////////////
			case 2:
				do
				{
					displayDrinkMenu();
					cin >> UserInput;
					UserInput = inputValidate(UserInput);
					switch (UserInput)
					{
					case 1:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[1][0] += numberWanted;
						commulateTotal += numberWanted * itemPrice[1][0];
						break;
					case 2:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[1][1] += numberWanted;
						commulateTotal += numberWanted * itemPrice[1][1];
						break;
					case 3:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[1][2] += numberWanted;
						commulateTotal += numberWanted * itemPrice[1][2];
						break;
					case 4:
						break;
					case 5:
						displayReceipt(ptr_user);
						return 0;
					}
				} while (UserInput < 4);

				break;
				/////////////////////Process In the GiftCard menu///////////////
			case 3:
				do
				{
					displayGiftCard();
					cin >> UserInput;
					UserInput = inputValidate(UserInput);
					switch (UserInput)
					{
					case 1:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[2][0] += numberWanted;
						commulateTotal += numberWanted * itemPrice[2][0];
						break;
					case 2:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[2][1] += numberWanted;
						commulateTotal += numberWanted * itemPrice[2][1];
						break;
					case 3:
						cout << "How many you want: ";
						cin >> numberWanted;
						numberWanted = inputQuantityValidate(numberWanted);
						numberOfOrder[2][2] += numberWanted;
						commulateTotal += numberWanted * itemPrice[2][2];
						break;
					case 4:
						break;
					case 5:
						displayReceipt(ptr_user);
						return 0;
					}
				} while (UserInput < 4);

				break;
			/////////////////////Search Item/////////////////////////////
			case 4:
                {
                     ///////////////////////////////////////////////////////////////////
                  //Add vector to save all item and it price for sort using
                  vector<string> ALLITEM;
                  for(int row=0; row<ROW; row++)
                    for(int col=0; col<COL; col++)
                      ALLITEM.push_back(itemName[row][col]);
                  vector<double> ALLPRICE;
                  for(int row=0; row<ROW; row++)
                    for(int col=0; col<COL; col++)
                      ALLPRICE.push_back(itemPrice[row][col]);
                    //Get User input
                string itemSearch;
                bool found = false;
                cout << "Enter the item you want to search: ";
                cin.ignore();
                getline(cin, itemSearch);
                      found = SearchItem(itemSearch, ALLITEM, ALLPRICE);
                      if(found == false)
                      {
                        cout << "Sorry, the item was not found. The menu is below. " ;
                        cout << "Enter anything to turn back." << endl;;
                        displayAllItem(ALLITEM, ALLPRICE);
                        cin.ignore();
                        break;
                      }
                       else
                       {
                         int* iprItem;    /////point to save the search item order number address
                         double* iprPrice;    /////point to save the search item price address
                         cout << "How many you want: ";
                         cin >> numberWanted;
                         numberWanted = inputQuantityValidate(numberWanted);
                         /////***Add the number to the numberOfOrder****/////
                         iprItem = FindingItemPostition(itemSearch);
                         iprPrice = FindingPricePosition(itemSearch);
                    ////////////////////////////////////////////////////////
                    //ADD numbers of order to ptrItemOrder and add total.
                    *iprItem += numberWanted;
                    commulateTotal += numberWanted * (*iprPrice);
                       }
                       break;
                }
                case 5:
                   {


                    if (UserInput == 5)
                        {
                            displayReceipt(ptr_user);
                            return 0;
                        }
                   }
			}
		}

	} while (UserInput != 6);
    delete ptr_user;
    ptr_user = NULL;
	return 0;
}


      //////////////////////////////////////////////////////////////
      /////////////////////Display Menu Function///////////////////
      ////////////////////////////////////////////////////////////
void displayMenu()
{
	ClearScreen();
	cout << "/////////////////////////////////////////////////////////////" << endl;
	cout << "/" << "                 Odin-----Menu                       /" << endl;
	cout << "/////////////////////////////////////////////////////////////" << endl;
	cout << "Select from Menu using the number associated with that item." << endl;
	cout << "1.Food" << endl;
	cout << "2 Drink" << endl;
	cout << "3.Gift Card" << endl;
	cout << "4.Search Item" << endl;
	cout << "5.Done Ordering" << endl;
	cout << "6. Exit" << endl;
	cout << "choice:";
}
void displayFoodMenu()
{
	ClearScreen();
	cout << "/////////////////////////////////////////////////////////////" << endl;
	cout << "/                  Odin-----Food                            /" << endl;
	cout << "/////////////////////////////////////////////////////////////" << endl;
	displayMenueOrder(itemName, itemPrice, 0);
}
void displayDrinkMenu()
{
	ClearScreen();
	cout << "/////////////////////////////////////////////////////////////" << endl;
	cout << "/                  Odin-----Drink                           /" << endl;
	cout << "/////////////////////////////////////////////////////////////" << endl;
	displayMenueOrder(itemName, itemPrice, 1);
}
void displayGiftCard()
{
	ClearScreen();
	cout << "/////////////////////////////////////////////////////////////" << endl;
	cout << "/                Odin-----Gift Card                         /" << endl;
	cout << "/////////////////////////////////////////////////////////////" << endl;
	displayMenueOrder(itemName, itemPrice, 2);
}

      //////////////////////////////////////////////////////////////////////////
      //////////////////Function that pass item name and and price to display item information
      //////////////////////////////////////////////////////////////////////////
void displayMenueOrder(const string item[][COL], const double price[][COL], int row)
{

	cout << setw(20) << left << "ITEM" << "\t\t\t\t\t\tPRICE" << endl;
	for (int i = 0; i<3; i++)
	{
		cout << (i + 1) << "." << setw(21) << left << item[row][i] << "\t\t\t\t\t\t$" << price[row][i] << endl;
	}
	cout << "4.Back to menu" << endl;
	cout << "5.End order" << endl;
	cout << "choice:";
}

      //////////////////////////////////////////////////////////////////////////
      //////////////////Function that check input form 1~5/////////////////////
      //////////////////////////////////////////////////////////////////////////
int inputValidate(int input)
{
  
	while (input <1 || input >5)
	{
	    //clears users Input
	    cin.clear();
        cin.ignore(INT8_MAX, '\n');
      
       cout << "Sorry, not that option. Please enter 1~5: ";
       cin >> input;
        
	}
	return input;
}

      ///////////////////////////////////////////////////////////////////////////////////
      //////////////////Function that check input quantity//////////////////////////////
      ////////////////////////////////////////////////////////////////////should greater than0
int inputQuantityValidate(int qt)
{
	while (qt <= 0)
	{
	    //clears users Input
	    cin.clear();
        cin.ignore(INT8_MAX, '\n');
		cout << "Sorry, quantity cannot be negative, please reenter: ";
		cin >> qt;
	}
	return qt;
}

      ////////////////////////////////////////////////////////////////////
      //////////////Function that creates Receipt/////////////////////////
      ////////////////////////////////////////////////////////////////////
void createRecipt(const string menu[][COL], const double price[][COL],unique_ptr<int [][COL]> &quanty)
{

	//if the qunty is equal to zero then dont cout

	for (int row=0; row<ROW; row++)
    {
        for(int col=0; col<COL; col++)
        {
            if (quanty[row][col] != 0)
		{
			itemCounter += 1;
			cout << (itemCounter) << "." << setw(21) << left << menu[row][col] << "                 " << quanty[row][col] << "\t\t$"<< fixed << setprecision(2) << price[row][col] * quanty[row][col] << endl;

		}
        }
    }
}
      ////////////////////////////////////////////////////////////
      /////////////////Function that display Receipt/////////////
      ////////////////////////////////////////////////////////////
                                /////////////////Save File in this function.
                                /////////////////			Because After this function, program end
void displayReceipt(string *Puser)
{
	ClearScreen();
	cout << "Casher:  " << *Puser<< "\t\t";
	timeStamp();
	cout << setw(20) << left << "ITEM" << "                 " << "QTY" << "\t\t\tPRICE" << endl;
	cout << "-----------------------------------------------------------------------" << endl;
	createRecipt(itemName, itemPrice, numberOfOrder );
	cout << endl;
	cout << "-----------------------------------------------------------------------" << endl;
	cout << "                                                   "<< setw(15) << right << "Sub-total: $" << commulateTotal << endl;
	cout << "                                                          "<< setw(15) << right <<" TAX:8.5%" << endl;
	cout << "                                                   "<< setw(15) << right << " + $" << commulateTotal * TAX << endl;
	cout << "You total is $" << commulateTotal * (1 + TAX) << endl;
	cout << "Thank your for your business!" << endl;
	saveDataInFile(Puser);
}

      /////////////////////////////////////////////////////////
      //////////////////Function clear the screen//////////////
      /////////////////////////////////////////////////////////
void ClearScreen()
{
	system("cls");

}
      ////////////////////////////////////////////////////////////
      /////////////////Function display date/////////////////////
      ////////////////////////////////////////////////////////////
void timeStamp()
{
	// current date/time based on current system
	time_t now = time(0);

	// convert now to string form
	char* dt = ctime(&now);

	cout << dt << endl;
}
      ////////////////////////////////////////////////////////////
      /////////////////Function Save data in file////////////////
      ////////////////////////////////////////////////////////////
                              ////Write item name and it quantity sold and daily earn
                              ////ROW present FOOD, DRINK, AND GIFT-CARD
                              ////COL present different item in FOOD, DRINK, AND GIFT-CARD
void saveDataInFile(string *Puser)
{
	time_t now = time(0);
	char* dt = ctime(&now);
	ofstream outputFile;
	outputFile.open("Data.txt");
	outputFile << "Casher:" << *Puser << "\t\t\t\t\t\t";
	outputFile << dt << endl;
	outputFile << "ITEM"<< setw(30)<<" \t\t\tquantity" << "\t\t\tPRICE"  << endl;
	outputFile << "-------------------------------------------------------------------------------------" << endl;
	for (int row = 0; row<ROW; row++)
	{
		for (int col = 0; col<COL; col++)
		{
			if (numberOfOrder[row][col] != 0)
					outputFile << setw(30) << left << itemName[row][col] << "\t\t\t" << numberOfOrder[row][col] <<"\t\t\t$" << fixed <<setprecision(2) <<(itemPrice[row][col] * numberOfOrder[row][col]) << endl;

		}
	}
	outputFile << "-------------------------------------------------------------------------------------" << endl;
	outputFile << "                                   "<< setw(20) << right << "Sub-total: $" << commulateTotal << endl;
	outputFile << "                                      "<< setw(20) << right <<" TAX:8.5%" << endl;
	outputFile << fixed <<setprecision(2) <<   "                                  "<< setw(20) << right << " + $" << commulateTotal * TAX << endl;
	outputFile << fixed <<setprecision(2) << "Today's total sell is $ " << commulateTotal * (1 + TAX)  << endl;
	outputFile.open("Data.txt");

	outputFile.close();
}
      ////////////////////////////////////////////////////////////
      /////////////Function display all menu/////////////////////
      ////////////////////////////////////////////////////////////
bool SearchItem(string item, vector<string> allItem, vector<double> price)
{
  /////////////////////////////////////////////////////////////////
  //sort ALLITEM and ALLPRICE in accending way
  int startIt, minIndex;
  string minValue;
  double temPr;
  for(startIt=0; startIt<(allItem.size()-1); startIt++)
  {
    minIndex = startIt;
    minValue = allItem[startIt];
    for(int index=startIt+1; index<(allItem.size()); index++)
    {
      if(allItem[index]<minValue)
      {
        minValue = allItem[index];
        minIndex = index;
      }
    }
    allItem[minIndex] = allItem[startIt];
    allItem[startIt] = minValue;
    temPr = price[minIndex];
    price[minIndex] = price[startIt];
    price[startIt] = temPr;
  }
  //End sorting
  /////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////
  //Finding item
  int first =0,
      last = allItem.size()-1,
      middle,
      position = -1;
      bool find = false;
  while(!find && first<=last)
  {
    middle = (first+last) / 2;
    if(allItem[middle] == item)
    {
      find = true;
      position = middle;
    }
    else if(allItem[middle] > item)
      last = middle-1;
    else
      first = middle+1;
  }
  return find;
}
      //////////////////////////////////////////////////////////////////////
      /////////////////Function find the item's order address///////////////
      //////////////////////////////////////////////////////////////////////
int* FindingItemPostition(string item)
{
  int* ptr;
  ////////////////////////////////////////////////////////
  //find the position search item in the 2-D array
  int row, col;
  for(int rw=0; rw<ROW; rw++)
    for(int cl=0; cl<COL; cl++)
    {
      if(item == itemName[rw][cl])
      {
        row = rw;
        col = cl;
      }
    }
  //End Finding
  ////////////////////////////////////////////////////////
  ptr = &numberOfOrder[row][col];
  return ptr;
}

      ////////////////////////////////////////////////////////////////
      /////////////////Function find the item's price address/////////
      ////////////////////////////////////////////////////////////////
double* FindingPricePosition(string item)
{
  double* ptr;
  ////////////////////////////////////////////////////////
  //find the position search item in the 2-D array
  int row, col;
  for(int rw=0; rw<ROW; rw++)
    for(int cl=0; cl<COL; cl++)
    {
      if(item == itemName[rw][cl])
      {
        row = rw;
        col = cl;
      }
    }
  //End Finding
  ////////////////////////////////////////////////////////
  ptr = &itemPrice[row][col];
  return ptr;
}

      //////////////////////////////////////////////////////////////
      /////////////////Function display all menu //////////////////
      ////////////////////////////////////////////////////////////
void displayAllItem(vector<string> item, vector<double> price)
{
  cout << setw(20) << left << "ITEM" << "\t\t\t\t\t\tPRICE" << endl;
	for(int i=0; i<item.size(); i++)
	{
		cout << (i + 1) << "." << setw(21) << left << item[i] << "\t\t\t\t\t\t$" << price[i] << endl;
  }
}
      //////////////////////////////////////////////////////////////
      /////////////////Function Crare register //////////////////
      ////////////////////////////////////////////////////////////
void identifyUser(string *Puser)
{
  cout << "Please Enter User Name:";
  cin >> *Puser;
  cin.clear();
cin.ignore(INT8_MAX, '\n');
}
